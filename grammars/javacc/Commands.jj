options { 
	STATIC = false;
}

PARSER_BEGIN(CommandParser) 

import java.util.*;
import java.io.*;

public class CommandParser { 
	public static void main(String[] args) throws ParseException { 
		CommandParser parser = null; 
		if(args.length > 0) { 
			parser = new CommandParser(new StringReader(args[0]));
		} else { 
			parser = new CommandParser(System.in);
		}
		System.out.println(parser.Command().toString());
	}
}

class Command {

	private Generator generator;
	private Transform[] transforms;
	
	public Command(Generator g, Collection<Transform> ts) {
		if(g == null) { throw new IllegalArgumentException("null Generator argument"); }
		generator = g;
		transforms = ts.toArray(new Transform[0]);
	}
	
	public Generator getGenerator() { return generator; }
	public int length() { return transforms.length; }
	public Transform getTransform(int i) { return transforms[i]; }
}

class Expression { 
	
	public String key;
	public Expression[] args;
	
	public Expression(String k, Expression... as) { 
		key = k;
		args = as.clone();
	}
	
	public Expression(String k, Collection<Expression> as) {  
		key = k;
		args = as.toArray(new Expression[0]);
	}
}

class Generator extends Expression { 
	public Generator(String k, Expression... as) { 
		super(k, as);
	}
}

class Transform extends Expression {
	public Transform(String k, Expression... as) { 
		super(k, as);
	}
}

class Literal extends Expression { 
	private Object value; 

	public Object getValue() { return value; }

	public Literal(String key, Object v) { 
		super(key, String.valueOf(v)); 
		value = v; 
	}
}

PARSER_END(CommandParser) 

TOKEN: {
	<DIGIT: ["0","1","2","3","4","5","6","7","8","9"]> 
	| <ESCAPE: "\\" >
	| <NEWLINE: ("\n") | ("\r\n")>
	| <LETTER: ["a"-"z","A"-"Z"]>
	| <TAB: "\t">
	| <SPACE: " ">
	| <PUNCT: ["~","^","&","*","(",")","+","=","`","{","}","[","]","|",";","'",",",".","/"] >
	| <DASH: ["-","_"]>
	| <LEFTCOMPARE: "<">
	| <RIGHTCOMPARE: ">">
	| <BANG: "!">
	| <HASH: "#">
	| <AT: "@">
	| <PCT: "%">
	| <DOLLAR: "$"> 
	| <QUESTION: "?">
	| <COLON: ":"> 
}

void Command() : {}
{
	( ws() )? Generate() Method()
}

void Generate() : {}
{
	Singleton()
	| All()
	| Get()
}

void Method() : {}
{
	( ws() )? Transform() ( ws() Transform() )*
}

void Singleton() : {}
{
	<AT> ws() Resource()
}

void All() : {}
{
	<PCT>	
}

void Get() : {}
{
	<HASH> Variable()
}

Transform Transform() : { Transform t; }
{
	Choose()
	| Follow()
	| ReverseFollow()
	| Filter()
	| SideEffectTransform()
}

Transform Choose() : { Number n; }
{
	( <BANG> n = NumberLiteral() )
	{ return new Transform("choose", n); }
}

void Follow() : {}
{
	<RIGHTCOMPARE> ws() Resource()
}

void ReverseFollow() : {}
{
	<LEFTCOMPARE>  ws() Resource()
}

void Filter() : {}
{
	<QUESTION> ws() Resource() ws() ( Resource() | Literal() )
}

void SideEffectTransform() : {}
{
	Store()
	| List()
	| PrettyPrint()
	| Count()
}

void Store() : {}
{
	<DOLLAR> Variable()
}

void List() : {}
{
	"ls"
}

void PrettyPrint() : {}
{
	"pp"
}

void Count() : {}
{
	"count"
}

void ws() : {} { ( <SPACE> )+ }

String Variable() : { Token t; String s; }
{
	( 
		t = <LETTER> 
		s = alphaNumeric()
	)

	{ return t.image + s; }
}

Literal Literal() : { Literal l = null; Object v; } 
{
	UndefinedLiteral()  { l = new Literal("undefined", null); }
	| v = BooleanLiteral() { l = new Literal("boolean", v); }
	| v = NumberLiteral() { l = new Literal("number", v); }
	| v = QuotedStringLiteral() { l = new Literal("string", v); }
}

Literal Resource() : { Literal l; String s; }
{
	( 	
		s = URILiteral() { l = new Literal("uri", s); }
		| s = NamespaceURI() { l = new Literal("namespace", s); }
	)
	{ return l; }
}

void UndefinedLiteral() : {}
{
	"undefined"
}

Boolean BooleanLiteral() : { boolean b; }
{
	"true"  { b = true; }
	| "false" { b = false; }

	{ return b; }
}

Number NumberLiteral() : { Token t; StringBuilder sb = new StringBuilder(); }
{
	( t = <DIGIT> { sb.append(t.image); } )+ 

	{ return Integer.parseInt(sb.toString()); }
}

String QuotedStringLiteral() : { String s; Token t; StringBuilder sb = new StringBuilder();  }
{
	"\"" 
	( 
		t = <LETTER> { sb.append(t.image); }
		| t = <DIGIT>  { sb.append(t.image); }
		| t = <PUNCT> { sb.append(t.image); }
		| t = <COLON>  { sb.append(t.image); }
		| t = <QUESTION> { sb.append(t.image); }
		| t = <DOLLAR>{ sb.append(t.image); }
		| t = <DASH>{ sb.append(t.image); }
		| t = <PCT>{ sb.append(t.image); }
		| t = <AT>{ sb.append(t.image); }
		| t = <HASH>{ sb.append(t.image); }
		| t = <BANG> { sb.append(t.image); }
		| t = <TAB> { sb.append(t.image); }
		| t = <LEFTCOMPARE> { sb.append(t.image); }
		| t = <RIGHTCOMPARE> { sb.append(t.image); }
		| <ESCAPE> ( "\"" { sb.append("\""); }  | <ESCAPE> { sb.append("\\"); } )
		| t = <SPACE> { sb.append(t.image); }
	)*
	"\""

	{ return sb.toString(); }
}

String NamespaceURI() : { String[] pair = new String[2]; }
{
	pair[0] = Prefix() 
	<COLON>	
	pair[1] = Suffix()

	{ return pair[0] + ":" + pair[1]; }
}

String Prefix() : { Token t; StringBuilder sb = new StringBuilder(); }
{
	( 
		t = <DASH> { sb.append(t.image); } 
		| t = <LETTER> { sb.append(t.image); } 
	) 
	( <DASH> | <LETTER> | <DIGIT>  )* 
}

String Suffix() : { Token t; String s; }
{
	t = <LETTER>  
	s = alphaNumeric() 
	{ return t.image + s; }
}

String alphaNumeric() : { StringBuilder sb = new StringBuilder(); Token t;  } 
{
	( 
		t = <LETTER> { sb.append(t.image); }
		| t = <DIGIT> { sb.append(t.image); }
	)* 
	{ return sb.toString(); }
}

String URI() : { StringBuilder sb = new StringBuilder(); }
{
	t = <LETTER>  { sb.append(t.image); }
	( 
		LOOKAHEAD(2)
		t = <LETTER> 
		| <DIGIT> 
		| <PUNCT> 
		| <COLON> 
		| <QUESTION>
		| <DASH>
		| <PCT>
		| <AT>
		| <HASH>
		| <BANG> 
	)*

	{ return sb.toString(); }
}

String URILiteral() : { String s; }
{
	<LEFTCOMPARE>  s = URI() <RIGHTCOMPARE> { return s; }
}

